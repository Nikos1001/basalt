#! python3

from error import Error
import sys

import reader
import parser
import compiler
import os
import shutil
import native_funcs

if len(sys.argv) == 1:
    print('Usage: basalt [path/to/file]')
    exit(-1)

def handle_errs(errs):
    if len(errs) > 0:
        for err in errs:
            err.print()
        shutil.rmtree('build') 
        exit(-1)

if not os.path.isdir('build'):
    os.mkdir('build')

read_errs, lists = reader.read_file(sys.argv[1])
handle_errs(read_errs)

parse_errs = []
asts = []
for l in lists:
    ast = parser.parse(l, parse_errs)
    asts.append(ast)
handle_errs(parse_errs)

compile_errs = []

global_compiler = compiler.Compiler()
global_compiler.funcs[-1]['print'] = compiler.Function('print')
global_compiler.funcs[-1]['print'].native_specs.append(native_funcs.print_spec)
global_compiler.funcs[-1]['idx'] = compiler.Function('idx')
global_compiler.funcs[-1]['idx'].native_specs.append(native_funcs.idx_spec)
global_compiler.find_decls(asts, compile_errs)
main = global_compiler.get_incarn('main', [], compile_errs)

if main == None:
    compile_errs.append(Error().msg('Main function missing.'))

handle_errs(compile_errs)

compiler.close_all_blocks()

path_pieces = sys.argv[0].split('/')
path_pieces[-1] = 'rtlib.cio'
rtlib_path = '/'.join(path_pieces)

shutil.copy(rtlib_path, 'build/a.cio')

cionom_path = '/'.join(os.path.abspath(shutil.which('cionom-cli.out')).split('/')[:-1])
final_path = os.path.abspath('out.cbe')
build_dir_path = os.path.abspath('build')
paths = [os.path.abspath('build/' + path[:-4]) for path in os.listdir('build/') if path.endswith('.cio')]
os.chdir('/')
os.chdir(cionom_path)
i = 0
for path in paths:
    os.system('./cionom-cli.out --emit-bytecode=' + path + '.ibc ' + path + '.cio')
    i += 1 

cmd = './cionom-cli.out --bundle=' + final_path + ' '
for path in paths:
    cmd += path + '.ibc '

os.system(cmd)
#shutil.rmtree(build_dir_path)
